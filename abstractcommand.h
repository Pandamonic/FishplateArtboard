#ifndef ABSTRACTCOMMAND_H
#define ABSTRACTCOMMAND_H

// ---------------------------------------------------------------------------
// 描述: 定义了命令模式中的抽象命令基类 AbstractCommand。
//       所有具体的操作（如添加图形、删除图形等）都将作为该类的派生类实现。
// ---------------------------------------------------------------------------

/// @brief AbstractCommand 是所有具体命令的抽象基类。
/// 它为命令模式定义了核心的执行 (execute) 和撤销 (undo) 接口。
/// 这个类是抽象的，不能被直接实例化，必须由具体的命令类继承并实现其纯虚函数。

class AbstractCommand
{
public:
    /// @brief 虚析构函数。
    /// 确保派生类命令对象时，可以确保派生类的析构函数被正确调用，
    /// 从而正确释放派生类可能持有的资源（例如，命令对象拥有的图形对象）。
    virtual ~AbstractCommand() {}

    /// @brief 执行命令的纯虚函数接口。
    /// 派生类必须实现此方法，定义该命令被执行时应执行的具体操作。
    /// 这个方法通常在命令第一次被执行，或者在“重做 (Redo)”操作时被调用。
    virtual void execute() = 0;

    /// @brief 撤销命令的纯虚函数接口。
    /// 派生类必须实现此方法，定义如何撤销之前通过 execute() 执行的操作，
    /// 将系统状态恢复到执行该命令之前的状态。
    virtual void undo() = 0;

protected:
    /// @brief 保护的构造函数。
    /// 由于 AbstractCommand 是一个抽象类，
    /// 它不应该被外部直接实例化。将构造函数设为 protected 可以阻止这一点，
    /// 同时仍然允许派生类的构造函数隐式或显式地调用它。
    AbstractCommand() {}
};

#endif // ABSTRACTCOMMAND_H
